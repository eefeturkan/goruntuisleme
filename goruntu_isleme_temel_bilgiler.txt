=====================================================
GÖRÜNTÜ İŞLEME TEMELLERİ VE ÖRNEK KODLAR
=====================================================

Bu dosya, görüntü işleme işlemlerinin ne olduğunu ve nasıl uygulandığını
basit bir şekilde açıklamaktadır. Her bir işlem için temel açıklama ve
Python ile OpenCV kullanarak nasıl uygulanacağına dair örnek kod parçaları
bulunmaktadır.

=====================================================
1. GÖRÜNTÜ OKUMA VE KAYDETME
=====================================================

Görüntü Okuma:
--------------
OpenCV ile bir görüntü dosyasını okumak için cv2.imread() fonksiyonu kullanılır.
OpenCV görüntüleri BGR (Mavi-Yeşil-Kırmızı) formatında okur.

Örnek Kod:
```python
import cv2
# Görüntüyü oku
img = cv2.imread("resim.jpg")
# BGR'den RGB'ye dönüştür (çoğu uygulama RGB kullanır)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
```

Görüntü Kaydetme:
----------------
Bir görüntüyü dosyaya kaydetmek için cv2.imwrite() fonksiyonu kullanılır.

Örnek Kod:
```python
import cv2
# Görüntüyü kaydet
cv2.imwrite("yeni_resim.jpg", img)
```

=====================================================
2. GRİ TONLAMAYA ÇEVİRME
=====================================================

Renkli bir görüntüyü gri tonlamalı hale getirmek için cv2.cvtColor() fonksiyonu
ve COLOR_BGR2GRAY veya COLOR_RGB2GRAY sabiti kullanılır.

Gri tonlama, her pikselin renk bilgisini (R,G,B) tek bir yoğunluk değerine
dönüştürür. Bu dönüşüm genellikle şu formülle yapılır:
Gri = 0.299*R + 0.587*G + 0.114*B

Bu ağırlıklar, insan gözünün farklı renklere olan duyarlılığını yansıtır.

Örnek Kod:
```python
import cv2
import numpy as np

# Renkli görüntüyü oku
img = cv2.imread("resim.jpg")

# Gri tonlamaya çevir
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Manuel olarak gri tonlamaya çevirmek istersek:
# (Bu, OpenCV'nin yaptığı işlemin basitleştirilmiş halidir)
b, g, r = cv2.split(img)  # Kanalları ayır
gray_manual = np.round(0.299 * r + 0.587 * g + 0.114 * b).astype(np.uint8)
```

=====================================================
3. NEGATİF ALMA
=====================================================

Bir görüntünün negatifini almak, her piksel değerini 255'ten çıkararak
elde edilir. Bu işlem, görüntüdeki renkleri tersine çevirir:
siyah beyaz olur, beyaz siyah olur.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Negatifini al
negative_img = 255 - img

# Alternatif olarak:
negative_img2 = cv2.bitwise_not(img)
```

=====================================================
4. RGB KANALLARA AYIRMA
=====================================================

Renkli bir görüntü, Kırmızı (R), Yeşil (G) ve Mavi (B) olmak üzere
üç renk kanalından oluşur. Bu kanalları ayırmak için cv2.split() fonksiyonu kullanılır.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# BGR kanallarına ayır (OpenCV BGR formatı kullanır)
b, g, r = cv2.split(img)

# Her kanalı ayrı ayrı göstermek için:
# Boş (sıfır) görüntüler oluştur
zeros = np.zeros_like(b)

# Sadece R kanalını içeren görüntü
r_channel = cv2.merge([zeros, zeros, r])  # BGR formatında

# Sadece G kanalını içeren görüntü
g_channel = cv2.merge([zeros, g, zeros])  # BGR formatında

# Sadece B kanalını içeren görüntü
b_channel = cv2.merge([b, zeros, zeros])  # BGR formatında
```

=====================================================
5. PARLAKLIK AYARLAMA
=====================================================

Parlaklık ayarlamak, görüntüdeki her piksele sabit bir değer ekleyerek
veya çıkararak yapılır. Pozitif değerler parlaklığı artırır, negatif
değerler azaltır.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Parlaklığı artır (50 birim)
brightness = 50
brightened_img = cv2.add(img, np.ones_like(img) * brightness)

# Parlaklığı azalt (50 birim)
brightness = -50
darkened_img = cv2.add(img, np.ones_like(img) * brightness)

# Alternatif yöntem:
# alpha: kontrast, beta: parlaklık
alpha = 1.0  # Kontrast değişmez
beta = 50    # Parlaklık artar
brightened_img2 = cv2.convertScaleAbs(img, alpha=alpha, beta=beta)
```

=====================================================
6. EŞİKLEME (THRESHOLDING)
=====================================================

Eşikleme, piksel değerlerini belirli bir eşik değerine göre ikiye ayırır.
Eşik değerinden büyük pikseller beyaz (255), küçük olanlar siyah (0) olur.
Bu işlem genellikle gri tonlamalı görüntüler üzerinde uygulanır.

Örnek Kod:
```python
import cv2

# Görüntüyü oku ve gri tonlamaya çevir
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Basit eşikleme uygula
threshold_value = 127  # Eşik değeri (0-255 arası)
max_value = 255       # Eşik üstü değer
_, binary_img = cv2.threshold(gray_img, threshold_value, max_value, cv2.THRESH_BINARY)

# Diğer eşikleme türleri:
# cv2.THRESH_BINARY_INV: Ters ikili eşikleme
# cv2.THRESH_TRUNC: Kesme eşiklemesi
# cv2.THRESH_TOZERO: Sıfıra eşikleme
# cv2.THRESH_TOZERO_INV: Ters sıfıra eşikleme

# Otsu yöntemi ile otomatik eşik değeri belirleme
_, otsu_img = cv2.threshold(gray_img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
```

=====================================================
7. HİSTOGRAM HESAPLAMA
=====================================================

Histogram, bir görüntüdeki piksel yoğunluklarının dağılımını gösterir.
Gri tonlamalı bir görüntü için 0-255 arası değerlerin dağılımını,
renkli bir görüntü için her renk kanalının ayrı histogramını gösterir.

Örnek Kod:
```python
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Görüntüyü oku ve gri tonlamaya çevir
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Gri tonlamalı görüntünün histogramını hesapla
hist = cv2.calcHist([gray_img], [0], None, [256], [0, 256])

# Histogramı çiz
plt.figure()
plt.title("Gri Tonlama Histogramı")
plt.xlabel("Piksel Değeri")
plt.ylabel("Piksel Sayısı")
plt.plot(hist)
plt.xlim([0, 256])
plt.show()

# Renkli görüntünün histogramını hesapla
colors = ('b', 'g', 'r')
plt.figure()
plt.title("RGB Histogramı")
plt.xlabel("Piksel Değeri")
plt.ylabel("Piksel Sayısı")

for i, color in enumerate(colors):
    hist = cv2.calcHist([img], [i], None, [256], [0, 256])
    plt.plot(hist, color=color)

plt.xlim([0, 256])
plt.show()
```

=====================================================
8. HİSTOGRAM EŞİTLEME
=====================================================

Histogram eşitleme, bir görüntünün kontrastını iyileştirmek için kullanılır.
Bu işlem, piksel değerlerinin dağılımını daha geniş bir aralığa yayarak
görüntüdeki detayları daha görünür hale getirir.

Örnek Kod:
```python
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Görüntüyü oku ve gri tonlamaya çevir
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Histogram eşitleme uygula
equalized_img = cv2.equalizeHist(gray_img)

# Orijinal ve eşitlenmiş histogramları karşılaştır
hist_original = cv2.calcHist([gray_img], [0], None, [256], [0, 256])
hist_equalized = cv2.calcHist([equalized_img], [0], None, [256], [0, 256])

plt.figure(figsize=(10, 5))
plt.subplot(121)
plt.title("Orijinal Histogram")
plt.plot(hist_original)
plt.xlim([0, 256])

plt.subplot(122)
plt.title("Eşitlenmiş Histogram")
plt.plot(hist_equalized)
plt.xlim([0, 256])
plt.show()

# Renkli görüntüler için histogram eşitleme
# Her kanalı ayrı ayrı eşitlemek gerekir
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
r, g, b = cv2.split(img_rgb)

r_eq = cv2.equalizeHist(r)
g_eq = cv2.equalizeHist(g)
b_eq = cv2.equalizeHist(b)

img_eq = cv2.merge([r_eq, g_eq, b_eq])
```

=====================================================
9. KONTRAST AYARLAMA
=====================================================

Kontrast, görüntüdeki açık ve koyu bölgeler arasındaki farkı ifade eder.
Kontrast ayarlamak için piksel değerleri bir katsayı ile çarpılır.
1.0'dan büyük katsayılar kontrastı artırır, küçük katsayılar azaltır.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Kontrastı artır (2.0 kat)
contrast = 2.0
contrasted_img = cv2.convertScaleAbs(img, alpha=contrast, beta=0)

# Kontrastı azalt (0.5 kat)
contrast = 0.5
low_contrast_img = cv2.convertScaleAbs(img, alpha=contrast, beta=0)

# Kontrast ve parlaklığı birlikte ayarla
alpha = 1.5  # Kontrast
beta = 30    # Parlaklık
adjusted_img = cv2.convertScaleAbs(img, alpha=alpha, beta=beta)
```

=====================================================
10. TEMEL GÖRÜNTÜ İŞLEME KAVRAMLARI
=====================================================

Piksel:
-------
Görüntünün en küçük birimidir. Her piksel, gri tonlamalı görüntülerde
bir yoğunluk değeri (0-255), renkli görüntülerde ise üç renk değeri (R,G,B)
içerir.

NumPy Dizisi Olarak Görüntüler:
------------------------------
OpenCV'de görüntüler NumPy dizileri olarak temsil edilir:
- Gri tonlamalı görüntü: 2 boyutlu dizi (yükseklik, genişlik)
- Renkli görüntü: 3 boyutlu dizi (yükseklik, genişlik, kanal)

Örnek:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Görüntü boyutları
height, width, channels = img.shape
print(f"Yükseklik: {height}, Genişlik: {width}, Kanal Sayısı: {channels}")

# Belirli bir pikselin değerini al (y, x koordinatları)
y, x = 100, 150
pixel_value = img[y, x]
print(f"({x}, {y}) koordinatındaki piksel değeri: {pixel_value}")  # [B, G, R]

# Belirli bir pikselin değerini değiştir
img[y, x] = [0, 0, 255]  # Kırmızı piksel (BGR formatında)
```

Görüntü Döndürme:
----------------
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# 90 derece saat yönünde döndür
rotated_90_cw = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)

# 180 derece döndür
rotated_180 = cv2.rotate(img, cv2.ROTATE_180)

# 90 derece saat yönünün tersine döndür
rotated_90_ccw = cv2.rotate(img, cv2.ROTATE_90_COUNTERCLOCKWISE)
```

Görüntü Yeniden Boyutlandırma:
-----------------------------
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Belirli bir boyuta yeniden boyutlandır
resized_img = cv2.resize(img, (300, 200))  # (genişlik, yükseklik)

# Oranları koruyarak yeniden boyutlandır
scale_percent = 50  # orijinal boyutun %50'si
width = int(img.shape[1] * scale_percent / 100)
height = int(img.shape[0] * scale_percent / 100)
resized_img2 = cv2.resize(img, (width, height))
```

=====================================================
11. GÖRÜNTÜ FİLTRELEME (BULANIKLAŞTIRMA)
=====================================================

Bulanıklaştırma (Blurring), görüntüdeki gürültüyü azaltmak veya
detayları yumuşatmak için kullanılır.

Gaussian Bulanıklaştırma:
------------------------
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Gaussian bulanıklaştırma uygula
# (5,5) filtre boyutu, sigma=0 otomatik hesaplanır
blurred_img = cv2.GaussianBlur(img, (5, 5), 0)
```

Ortalama (Mean) Bulanıklaştırma:
-------------------------------
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Ortalama bulanıklaştırma uygula
# (5,5) filtre boyutu
blurred_img = cv2.blur(img, (5, 5))
```

Medyan Bulanıklaştırma:
----------------------
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Medyan bulanıklaştırma uygula
# 5: filtre boyutu
blurred_img = cv2.medianBlur(img, 5)
```

=====================================================
12. KENAR TESPİTİ
=====================================================

Kenar tespiti, görüntüdeki nesnelerin sınırlarını bulmak için kullanılır.

Canny Kenar Tespiti:
------------------
```python
import cv2

# Görüntüyü oku ve gri tonlamaya çevir
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Canny kenar tespiti uygula
# 100: alt eşik, 200: üst eşik
edges = cv2.Canny(gray_img, 100, 200)
```

Sobel Kenar Tespiti:
------------------
```python
import cv2
import numpy as np

# Görüntüyü oku ve gri tonlamaya çevir
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Sobel kenar tespiti uygula
# x yönündeki gradyan
sobelx = cv2.Sobel(gray_img, cv2.CV_64F, 1, 0, ksize=5)
# y yönündeki gradyan
sobely = cv2.Sobel(gray_img, cv2.CV_64F, 0, 1, ksize=5)

# Gradyanların mutlak değerini al
sobelx = np.absolute(sobelx)
sobely = np.absolute(sobely)

# Gradyanları birleştir
sobel_combined = cv2.addWeighted(sobelx, 0.5, sobely, 0.5, 0)
```

=====================================================
13. MORFOLOJİK İŞLEMLER
=====================================================

Morfolojik işlemler, görüntüdeki şekilleri değiştirmek için kullanılır.
Genellikle ikili (binary) görüntüler üzerinde uygulanır.

Genişletme (Dilation):
--------------------
```python
import cv2
import numpy as np

# Görüntüyü oku, gri tonlamaya çevir ve eşikle
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
_, binary_img = cv2.threshold(gray_img, 127, 255, cv2.THRESH_BINARY)

# Yapılandırma elemanı oluştur
kernel = np.ones((5, 5), np.uint8)

# Genişletme uygula
dilated_img = cv2.dilate(binary_img, kernel, iterations=1)
```

Aşındırma (Erosion):
------------------
```python
import cv2
import numpy as np

# Görüntüyü oku, gri tonlamaya çevir ve eşikle
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
_, binary_img = cv2.threshold(gray_img, 127, 255, cv2.THRESH_BINARY)

# Yapılandırma elemanı oluştur
kernel = np.ones((5, 5), np.uint8)

# Aşındırma uygula
eroded_img = cv2.erode(binary_img, kernel, iterations=1)
```

Açma (Opening):
-------------
```python
import cv2
import numpy as np

# Görüntüyü oku, gri tonlamaya çevir ve eşikle
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
_, binary_img = cv2.threshold(gray_img, 127, 255, cv2.THRESH_BINARY)

# Yapılandırma elemanı oluştur
kernel = np.ones((5, 5), np.uint8)

# Açma uygula (önce aşındırma, sonra genişletme)
opening_img = cv2.morphologyEx(binary_img, cv2.MORPH_OPEN, kernel)
```

Kapama (Closing):
--------------
```python
import cv2
import numpy as np

# Görüntüyü oku, gri tonlamaya çevir ve eşikle
img = cv2.imread("resim.jpg")
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
_, binary_img = cv2.threshold(gray_img, 127, 255, cv2.THRESH_BINARY)

# Yapılandırma elemanı oluştur
kernel = np.ones((5, 5), np.uint8)

# Kapama uygula (önce genişletme, sonra aşındırma)
closing_img = cv2.morphologyEx(binary_img, cv2.MORPH_CLOSE, kernel)
```

=====================================================
14. GÖRÜNTÜ DÖNÜŞÜM İŞLEMLERİ
=====================================================

Görüntü dönüşüm işlemleri, görüntünün uzaysal (spatial) özelliklerini değiştiren
işlemlerdir. Temel görüntü dönüşüm işlemleri arasında taşıma (translation),
aynalama (flipping/mirroring) ve eğme (shearing) bulunur.

Taşıma (Translation):
-------------------
Görüntüyü x ve y eksenlerinde belirli bir miktar kaydırma işlemidir.
Bu işlem, bütün pikselleri aynı anda aynı miktarda ve aynı yönde hareket ettirir.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Taşıma parametreleri: x ve y yönünde piksel cinsinden
tx, ty = 50, 30  # x yönünde 50 piksel, y yönünde 30 piksel

# Taşıma matrisi oluştur
M = np.float32([[1, 0, tx], [0, 1, ty]])

# Görüntü boyutları
h, w = img.shape[:2]

# Taşıma işlemini uygula
translated_img = cv2.warpAffine(img, M, (w, h))
```

Taşıma matrisi [1, 0, tx; 0, 1, ty] şeklindedir. Bu matris, her pikseli
x ekseninde tx kadar, y ekseninde ty kadar kaydırır.

Aynalama (Flipping/Mirroring):
----------------------------
Görüntüyü belirli bir eksen etrafında ters çevirme işlemidir.
Yatay aynalama (x eksenine göre), dikey aynalama (y eksenine göre)
ve her iki eksene göre aynalama yapılabilir.

Örnek Kod:
```python
import cv2

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Yatay aynalama (soldan sağa ters çevirme)
horizontal_flip = cv2.flip(img, 1)  # flipCode = 1

# Dikey aynalama (yukarıdan aşağıya ters çevirme)
vertical_flip = cv2.flip(img, 0)    # flipCode = 0

# Her iki eksene göre aynalama (hem yatay hem dikey)
both_flip = cv2.flip(img, -1)       # flipCode = -1
```

OpenCV'de flip fonksiyonu üç farklı flipCode değeri alır:
  - flipCode = 1: Yatay aynalama (x eksenine göre)
  - flipCode = 0: Dikey aynalama (y eksenine göre)
  - flipCode = -1: Her iki eksene göre aynalama

Eğme (Shearing):
--------------
Eğme, görüntünün bir tarafını sabit tutarken diğer tarafını
kaydırma işlemidir. Bu işlem, görüntüyü parallelogram (paralelkenar)
şekline dönüştürür.

X ekseninde eğme, görüntüyü yatay yönde eğerken;
Y ekseninde eğme, görüntüyü dikey yönde eğer.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Görüntü boyutları
h, w = img.shape[:2]

# X ekseninde eğme (yatay eğme)
sx = 0.5  # Eğme faktörü (pozitif değer sağa, negatif değer sola eğer)
M_x = np.float32([[1, sx, 0], [0, 1, 0]])
x_sheared = cv2.warpAffine(img, M_x, (w, h))

# Y ekseninde eğme (dikey eğme)
sy = 0.5  # Eğme faktörü (pozitif değer aşağıya, negatif değer yukarıya eğer)
M_y = np.float32([[1, 0, 0], [sy, 1, 0]])
y_sheared = cv2.warpAffine(img, M_y, (w, h))

# Hem X hem Y ekseninde eğme
M_xy = np.float32([[1, sx, 0], [sy, 1, 0]])
xy_sheared = cv2.warpAffine(img, M_xy, (w, h))
```

Eğme matrisleri:
  - X ekseninde eğme: [1, sx, 0; 0, 1, 0]
  - Y ekseninde eğme: [1, 0, 0; sy, 1, 0]
  - Her iki eksende eğme: [1, sx, 0; sy, 1, 0]

Burada sx ve sy eğme faktörleridir. Değerleri genellikle -1.0 ile 1.0 arasındadır.

Afin Dönüşüm Matrisi:
------------------
Taşıma, ölçeklendirme, döndürme ve eğme gibi geometrik dönüşümler,
afin dönüşüm matrisi kullanılarak ifade edilebilir.

2x3 boyutundaki afin dönüşüm matrisi şu şekildedir:
[a, b, c; d, e, f]

Bu matris, aşağıdaki dönüşümleri uygular:
x' = a*x + b*y + c
y' = d*x + e*y + f

Özel durumlar:
  - Taşıma: [1, 0, tx; 0, 1, ty]
  - Ölçeklendirme: [sx, 0, 0; 0, sy, 0]
  - Döndürme (θ açısı): [cos(θ), -sin(θ), 0; sin(θ), cos(θ), 0]
  - X ekseninde eğme: [1, sx, 0; 0, 1, 0]
  - Y ekseninde eğme: [1, 0, 0; sy, 1, 0]

Yukarıdaki dönüşümler birleştirilerek daha karmaşık dönüşümler elde edilebilir. 

=====================================================
15. ÖLÇEKLEME, DÖNDÜRME VE KIRPMA İŞLEMLERİ
=====================================================

Ölçekleme (Scaling):
-----------------
Ölçekleme, bir görüntünün boyutunu değiştirme işlemidir. Görüntü büyütülebilir (zoom in)
veya küçültülebilir (zoom out). Ölçekleme, oransal olabilir (en-boy oranı korunur)
veya eksenler boyunca farklı oranlarda yapılabilir.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Görüntü boyutları
h, w = img.shape[:2]

# Sabit boyuta ölçekleme
new_width = 300
new_height = 200
resized_img = cv2.resize(img, (new_width, new_height))

# Oransal ölçekleme
scale_factor = 0.5  # Yarı boyut
resized_img2 = cv2.resize(img, None, fx=scale_factor, fy=scale_factor)

# Farklı interpolasyon yöntemleri
# Büyütme için INTER_CUBIC, küçültme için INTER_AREA önerilir
enlarged_img = cv2.resize(img, None, fx=2.0, fy=2.0, interpolation=cv2.INTER_CUBIC)
reduced_img = cv2.resize(img, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
```

OpenCV'de kullanılan başlıca interpolasyon yöntemleri:
- INTER_NEAREST: En yakın komşu interpolasyonu (hızlı ama düşük kaliteli)
- INTER_LINEAR: Bilinear interpolasyon (varsayılan)
- INTER_CUBIC: Bicubic interpolasyon (daha kaliteli ama yavaş)
- INTER_AREA: Piksel alanı ilişkisi kullanılarak yeniden örnekleme (küçültme için en iyi)
- INTER_LANCZOS4: Lanczos interpolasyonu (yüksek kaliteli)

Döndürme (Rotation):
-----------------
Döndürme, görüntüyü belirli bir merkez etrafında belirli bir açıda döndürme işlemidir.
Bu işlem, genellikle görüntünün merkezinde gerçekleştirilir, ancak herhangi bir
nokta etrafında da döndürme yapılabilir.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Görüntü boyutları
h, w = img.shape[:2]

# Görüntünün merkezi
center = (w // 2, h // 2)

# Döndürme matrisi oluştur
# Parametreler: merkez, açı (derece), ölçek
angle = 45  # 45 derece saat yönünün tersine
scale = 1.0  # Orijinal boyut
rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale)

# Görüntüyü döndür
rotated_img = cv2.warpAffine(img, rotation_matrix, (w, h))

# Döndürülmüş görüntünün tamamını göstermek için yeni boyutları hesapla
# (Döndürme sırasında görüntünün köşeleri kesilerek kaybolabilir)
cos = np.abs(rotation_matrix[0, 0])
sin = np.abs(rotation_matrix[0, 1])
new_w = int((h * sin) + (w * cos))
new_h = int((h * cos) + (w * sin))

# Dönüşüm matrisini yeni merkeze göre ayarla
rotation_matrix[0, 2] += (new_w / 2) - center[0]
rotation_matrix[1, 2] += (new_h / 2) - center[1]

# Genişletilmiş boyutla döndür
rotated_img_full = cv2.warpAffine(img, rotation_matrix, (new_w, new_h))
```

Döndürme matrisi şu formüllere göre hesaplanır:
- x' = x * cos(θ) - y * sin(θ)
- y' = x * sin(θ) + y * cos(θ)

Burada θ, döndürme açısıdır (derece cinsinden).

Kırpma (Cropping):
--------------
Kırpma, görüntünün belirli bir bölgesini seçip geri kalan kısımları atma işlemidir.
Bu işlem, NumPy dizilerinin dilimleme özelliği kullanılarak kolayca gerçekleştirilebilir.

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("resim.jpg")

# Görüntü boyutları
h, w = img.shape[:2]

# Kırpma koordinatları
x_start = 100  # Sol kenar
y_start = 50   # Üst kenar
x_end = 300    # Sağ kenar
y_end = 200    # Alt kenar

# Görüntüyü kırp
# NumPy dizi dilimleme: array[y_start:y_end, x_start:x_end]
cropped_img = img[y_start:y_end, x_start:x_end]

# Görüntünün merkezini kırpmak için
center_x, center_y = w // 2, h // 2
size = 100  # Kırpılacak kare bölgenin yarı boyutu
center_crop = img[center_y-size:center_y+size, center_x-size:center_x+size]
```

Kırpma işlemi, görüntü işlemede sıkça kullanılan bir tekniktir. Örneğin:
- Görüntüdeki ilgilenilen bölgeyi (ROI - Region of Interest) ayırmak
- Görüntüyü belirli bir en-boy oranına getirmek
- Görüntüdeki gereksiz kısımları atmak
- Veri hazırlama aşamasında görüntüleri standart boyutlara getirmek

Görüntüler üzerinde bu dönüşümleri uygulayarak, farklı görüntü işleme ve
bilgisayarlı görü uygulamaları için gerekli olan ön işlemeleri gerçekleştirebiliriz. 

=====================================================
16. PERSPEKTİF DÖNÜŞÜMÜ
=====================================================

Perspektif dönüşümü, bir görüntünün perspektif açısını değiştiren bir dönüşüm türüdür.
Bu dönüşüm, genellikle eğik açıdan çekilmiş görüntüleri düzeltmek veya görüntüdeki
belirli bir bölgeyi (örneğin bir belge, poster veya ekran) düz bir görünüme dönüştürmek
için kullanılır.

Matematiksek olarak, perspektif dönüşüm 3x3 boyutunda bir dönüşüm matrisi
kullanarak gerçekleştirilir. Bu matris, bir düzlemdeki 4 noktanın başka bir düzlemdeki
4 noktaya dönüşümünü tanımlar. Dönüşüm matrisi için en az 4 nokta çifti gereklidir
(kaynak ve hedef noktaları).

Perspektif Dönüşüm İşlemi Adımları:
-----------------------------------
1. Kaynak görüntüde 4 nokta seçin (genellikle düzeltmek istediğiniz bölgenin 4 köşesi)
2. Bu 4 noktanın dönüştürüleceği hedef koordinatları belirleyin (genellikle bir dikdörtgen)
3. Perspektif dönüşüm matrisini hesaplayın
4. Dönüşüm matrisini kullanarak görüntüyü dönüştürün

Örnek Kod:
```python
import cv2
import numpy as np

# Görüntüyü oku
img = cv2.imread("egri_belge.jpg")

# Kaynak noktalar - görüntüde seçilen 4 nokta
# Bu noktalar, düzeltmek istediğimiz bölgenin köşeleridir
pts1 = np.float32([
    [73, 239],   # Sol üst
    [356, 117],  # Sağ üst
    [144, 482],  # Sol alt
    [434, 360]   # Sağ alt
])

# Hedef noktalar - düzeltilmiş görüntüdeki köşeler
# Genellikle standart bir dikdörtgen oluşturulur
width, height = 300, 400
pts2 = np.float32([
    [0, 0],          # Sol üst
    [width, 0],      # Sağ üst
    [0, height],     # Sol alt
    [width, height]  # Sağ alt
])

# Perspektif dönüşüm matrisini hesapla
matrix = cv2.getPerspectiveTransform(pts1, pts2)

# Perspektif dönüşümünü uygula
result = cv2.warpPerspective(img, matrix, (width, height))
```

Kullanıcı Etkileşimli Perspektif Düzeltme:
-----------------------------------------
Kullanıcının görüntü üzerinde 4 noktayı interaktif olarak seçmesini sağlayarak
daha esnek bir perspektif düzeltme işlemi gerçekleştirilebilir. Bu yaklaşım,
özellikle farklı uygulamalar için farklı bölgeleri düzeltmek istediğinizde kullanışlıdır.

```python
import cv2
import numpy as np

# Seçilen noktaları saklayacak liste
selected_points = []

def select_points(event, x, y, flags, param):
    """ Fare tıklamalarını kaydeden fonksiyon """
    global selected_points
    if event == cv2.EVENT_LBUTTONDOWN:
        selected_points.append((x, y))
        print(f"Nokta Seçildi: {x}, {y}")
        
        # Noktayı görüntü üzerinde göster
        cv2.circle(img_copy, (x, y), 5, (0, 0, 255), -1)
        cv2.imshow("Görüntü - 4 Nokta Seçin", img_copy)
        
        if len(selected_points) == 4:
            cv2.waitKey(500)  # Kısa bir bekleme
            cv2.destroyAllWindows()

# Görüntüyü yükle
img = cv2.imread("egri_belge.jpg")
img_copy = img.copy()

# Görüntüyü göster
cv2.imshow("Görüntü - 4 Nokta Seçin", img_copy)

# Mouse callback fonksiyonunu bağla
cv2.setMouseCallback("Görüntü - 4 Nokta Seçin", select_points)

# Kullanıcı 4 nokta seçene kadar bekle
cv2.waitKey(0)
cv2.destroyAllWindows()

# Kullanıcının seçtiği noktaları numpy array'e çevir
if len(selected_points) == 4:
    pts1 = np.float32(selected_points)
    
    # Düzeltme sonrası köşeleri belirle
    width, height = 500, 600
    pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])
    
    # Perspektif dönüşüm matrisini hesapla
    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    
    # Perspektif dönüşümünü uygula
    result = cv2.warpPerspective(img, matrix, (width, height))
    
    # Sonucu göster
    cv2.imshow("Perspektif Düzeltilmiş Görüntü", result)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
```

Perspektif Dönüşümün Kullanım Alanları:
-------------------------------------
1. Belge tarama ve düzeltme
2. Plaka tanıma sistemleri
3. Yüz tanıma ve yüz hizalama
4. Yapay gerçeklik (AR) uygulamaları
5. Panorama oluşturma
6. Havadan çekilen görüntülerin düzeltilmesi
7. Sanat eserlerinin ve posterlerin dijital restorasyonu

Perspektif dönüşüm, görüntü işlemede en güçlü dönüşüm türlerinden biridir ve
özellikle görüntüdeki geometrik bozulmaları düzeltmek için yaygın olarak kullanılır.
Sonuç olarak, görüntünün daha doğru analiz edilmesini ve görsel olarak daha
etkileyici olmasını sağlar. 